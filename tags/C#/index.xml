<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>C# on Dr Random</title><link>http://drrandom.org/tags/C#/</link><description>Recent content in C# on Dr Random</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 24 Jul 2012 18:15:17 +0000</lastBuildDate><atom:link href="http://drrandom.org/tags/C#/index.xml" rel="self" type="application/rss+xml"/><item><title>Purely Functional Data Structures–Part 2</title><link>http://drrandom.org/2012/07/24/purely-functional-data-structures-part-2/</link><pubDate>Tue, 24 Jul 2012 18:15:17 +0000</pubDate><guid>http://drrandom.org/2012/07/24/purely-functional-data-structures-part-2/</guid><description>So here we are at part 2 in the series of posts looking at Functional Data Structures from the book of the same name by Chris Okasaki. Last time we looked at what is perhaps the simplest of the functional data structures, the List (also useful as a LIFO stack). Up next we’ll continue in the order that Chris Okasaki used in his book, and take a look at implementing a Set using a Binary Tree.</description></item><item><title>Purely Functional Data Structures–Part 1</title><link>http://drrandom.org/2012/07/23/purely-functional-data-structures-part-1/</link><pubDate>Mon, 23 Jul 2012 06:00:00 +0000</pubDate><guid>http://drrandom.org/2012/07/23/purely-functional-data-structures-part-1/</guid><description>I thought it might be fun to explore a little bit of CS as it applies to functional programming, by looking at the idea of Functional Data Structures. This is actually an area that is still getting a lot of active research, and is pretty interesting stuff overall. The general idea is to try and figure out ways to provide immutable data structures which can be efficiently implemented in a functional setting.</description></item><item><title>Sometimes doing the right thing is still not the right thing</title><link>http://drrandom.org/2012/03/20/sometimes-doing-the-right-thing-is-still-not-the-right-thing/</link><pubDate>Tue, 20 Mar 2012 10:14:00 +0000</pubDate><guid>http://drrandom.org/2012/03/20/sometimes-doing-the-right-thing-is-still-not-the-right-thing/</guid><description>Tentatively subtitled: “How scale can make fools of us all”
This is going to be a real life war story…cause I haven’t done one of those in a while, and this particular case really ticked me off. Here’s the scoop: I’ve got a “service” which is called by other parts of the system. And by “service” I don’t mean something running in its own process and waiting for SOAP/REST requests or messages, I simply mean something that has a defined entry point (a static method in this case), where you pass in some data, and get something back.</description></item><item><title>More CodeRush Awesomeness</title><link>http://drrandom.org/2009/12/15/more-coderush-awesomeness/</link><pubDate>Tue, 15 Dec 2009 15:08:00 +0000</pubDate><guid>http://drrandom.org/2009/12/15/more-coderush-awesomeness/</guid><description>On November 27th, a beta release of the 9.3 version of the Developer Express components, including CodeRush and Refactor Pro! was made available to subscribers. This release is pretty significant to me because it contains a major feature that I have been waiting for for a long time: A Unit Test Runner. There were some teasers released by Mark Miller a while back, which only made me want to get my hands on the tool that much more.</description></item></channel></rss>