<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>.Net on Dr Random</title><link>http://drrandom.org/tags/.Net/</link><description>Recent content in .Net on Dr Random</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 14 Jun 2015 21:09:13 +0000</lastBuildDate><atom:link href="http://drrandom.org/tags/.Net/index.xml" rel="self" type="application/rss+xml"/><item><title>A bit on making functions tail-recursive in F#</title><link>http://drrandom.org/2015/06/14/a-bit-on-making-functions-tail-recursive-in-f/</link><pubDate>Sun, 14 Jun 2015 21:09:13 +0000</pubDate><guid>http://drrandom.org/2015/06/14/a-bit-on-making-functions-tail-recursive-in-f/</guid><description>If you recall a while back when I was demonstrating some Functional Data Structures , I mentioned the fact that some of the functions were not tail recursive, and that this is something that we would probably want to do something about. Which raises the question: How exactly do we go about making a function tail-recursive? I am going to attempt to address that question here.
One of the first problems with creating a tail recursive function is figuring out whether a function is tail recursive in the first place.</description></item><item><title>fold – The greatest thing that ever happened to your data structure</title><link>http://drrandom.org/2015/06/08/purely-functional-data-structures-part-2/</link><pubDate>Mon, 08 Jun 2015 17:16:22 +0000</pubDate><guid>http://drrandom.org/2015/06/08/purely-functional-data-structures-part-2/</guid><description>Let&amp;rsquo;s say that you’ve been working hard on this really awesome data structure. Its fast, its space efficient, its immutable, its everything anyone could dream of in a data structure. But you only have time to implement one function for processing the data in your new miracle structure, so what would it be?
Ok, not a terribly realistic scenario, but bare with me here, there is a point to this. The answer to this question, of course, is that you would implement fold.</description></item><item><title>Purely Functional Data Structures–Part 2</title><link>http://drrandom.org/2012/07/24/purely-functional-data-structures-part-2/</link><pubDate>Tue, 24 Jul 2012 18:15:17 +0000</pubDate><guid>http://drrandom.org/2012/07/24/purely-functional-data-structures-part-2/</guid><description>So here we are at part 2 in the series of posts looking at Functional Data Structures from the book of the same name by Chris Okasaki. Last time we looked at what is perhaps the simplest of the functional data structures, the List (also useful as a LIFO stack). Up next we’ll continue in the order that Chris Okasaki used in his book, and take a look at implementing a Set using a Binary Tree.</description></item><item><title>A quick (?) retrospective on learning (and using) F#</title><link>http://drrandom.org/2012/07/22/a-quick-retrospective-on-learning-and-using-f/</link><pubDate>Sun, 22 Jul 2012 15:00:00 +0000</pubDate><guid>http://drrandom.org/2012/07/22/a-quick-retrospective-on-learning-and-using-f/</guid><description>As you may have guessed from the title, I’ve started doing some work with F#. Initially I was somewhat reluctant to go down the F# path because some of the more interesting aspects of the other functional languages I’ve been exploring are not present…specifically the type systems behind Scala and Haskell, the laziness of Haskell, and the concurrent programming model of Erlang. In spite of these perceived downfalls, there were some definite plusses, namely interoperability with everything .</description></item><item><title>Sometimes doing the right thing is still not the right thing</title><link>http://drrandom.org/2012/03/20/sometimes-doing-the-right-thing-is-still-not-the-right-thing/</link><pubDate>Tue, 20 Mar 2012 10:14:00 +0000</pubDate><guid>http://drrandom.org/2012/03/20/sometimes-doing-the-right-thing-is-still-not-the-right-thing/</guid><description>Tentatively subtitled: “How scale can make fools of us all”
This is going to be a real life war story…cause I haven’t done one of those in a while, and this particular case really ticked me off. Here’s the scoop: I’ve got a “service” which is called by other parts of the system. And by “service” I don’t mean something running in its own process and waiting for SOAP/REST requests or messages, I simply mean something that has a defined entry point (a static method in this case), where you pass in some data, and get something back.</description></item><item><title>Announcing the Duhking Library for .Net 3.5</title><link>http://drrandom.org/2010/06/17/announcing-the-duhking-library-for-net-3-5/</link><pubDate>Thu, 17 Jun 2010 21:46:05 +0000</pubDate><guid>http://drrandom.org/2010/06/17/announcing-the-duhking-library-for-net-3-5/</guid><description>If it walks like a giraffe and talks like a duck then what is it? Maybe a duhk? Who knows, but it certainly is not a duck. So if that is the case, then you can probably guess what the Duhking library is all about…or maybe you can’t. In terms of programming, Duck Typing refers to the ability of some languages to allow you to treat an object of one type as an object of a different type, provided the methods/properties needed exist on both objects.</description></item><item><title>Announcing CR_MoveFile: DxCore plug-in for moving files around in a solution</title><link>http://drrandom.org/2009/12/07/announcing-cr_movefile-dxcore-plug-in-for-moving-files-around-in-a-solution/</link><pubDate>Mon, 07 Dec 2009 19:17:00 +0000</pubDate><guid>http://drrandom.org/2009/12/07/announcing-cr_movefile-dxcore-plug-in-for-moving-files-around-in-a-solution/</guid><description>As of right about now, you should be able to mosey on over to the DxCore Community Plug-ins page, and grab a copy of CR_MoveFile. This is a plug-in I created primarily as a tool to aid in working in a TDD environment, but which certainly has uses for non-TDD applications. It does basically what the name suggests, it allows you to move a file from one directory in your solution/project structure to another, even one in a different project.</description></item><item><title>Getting a CodeRush: Inside a CodeRush CodeIssue</title><link>http://drrandom.org/2009/10/07/getting-a-coderush-inside-a-coderush-codeissue/</link><pubDate>Wed, 07 Oct 2009 17:22:00 +0000</pubDate><guid>http://drrandom.org/2009/10/07/getting-a-coderush-inside-a-coderush-codeissue/</guid><description>Anyone who has been around me for more than a few hours while coding, or who pays any attention to me on Twitter will know that I am a huge fan of CodeRush and Refactor Pro! from DevExpress . I consider these sorts of tools essential to getting the most out of your development environment, and I think CodeRush is one of the best tools available for a number of reasons, not the least of which is it&amp;rsquo;s extensibility.</description></item><item><title>Some code for sorting lists which may contain dependencies</title><link>http://drrandom.org/2009/09/18/some-code-for-sorting-lists-which-may-contain-dependencies/</link><pubDate>Fri, 18 Sep 2009 20:08:47 +0000</pubDate><guid>http://drrandom.org/2009/09/18/some-code-for-sorting-lists-which-may-contain-dependencies/</guid><description>I ran into this odd problem recently working with some Linq2SQL based persistence code. There is some code someone put together to commit a list of changed entities to the database as part of a single transaction, which simply iterates through the list and performs the appropriate action. The problem I was having was that I had an object referenced by another object that needed to be persisted first, otherwise there was a foreign key violation.</description></item><item><title>Review: Art of Unit Testing by Roy Osherove</title><link>http://drrandom.org/2009/09/02/review-art-of-unit-testing-by-roy-osherove/</link><pubDate>Wed, 02 Sep 2009 17:36:02 +0000</pubDate><guid>http://drrandom.org/2009/09/02/review-art-of-unit-testing-by-roy-osherove/</guid><description>I was pleased to find recently that Roy Osherove’s Art of Unit Testing was available on Safari. I have been following Roy’s blog for a while now, and was quite excited at the prospect of him writing a book on Unit Testing. It was only my personal cheapness that kept me from shelling out the $25 to get the E-Book version from Manning ahead of time. I have to say, now that I have read it, that it would have been well worth the money.</description></item><item><title>Review – TypeMock Racer and Unit Testing Multithreaded Applications</title><link>http://drrandom.org/2009/06/19/review-typemock-racer-and-unit-testing-multithreaded-applications/</link><pubDate>Fri, 19 Jun 2009 16:31:00 +0000</pubDate><guid>http://drrandom.org/2009/06/19/review-typemock-racer-and-unit-testing-multithreaded-applications/</guid><description>The folks at TypeMock have released a new UnitTesting tool aimed specifically at catching deadlocks in multithreaded code called TypeMock Racer , and what&amp;rsquo;s more they are offering free licenses to folks willing to review it during the 21 day free trial period. As anyone who knows me can testify to, I am a whore for free-bees, so I decided to take them up on this.
For the impatient, here is the executive summary:</description></item></channel></rss>