<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>TDD on Dr Random</title><link>http://drrandom.org/tags/TDD/</link><description>Recent content in TDD on Dr Random</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 15 Dec 2009 15:08:00 +0000</lastBuildDate><atom:link href="http://drrandom.org/tags/TDD/index.xml" rel="self" type="application/rss+xml"/><item><title>More CodeRush Awesomeness</title><link>http://drrandom.org/2009/12/15/more-coderush-awesomeness/</link><pubDate>Tue, 15 Dec 2009 15:08:00 +0000</pubDate><guid>http://drrandom.org/2009/12/15/more-coderush-awesomeness/</guid><description>On November 27th, a beta release of the 9.3 version of the Developer Express components, including CodeRush and Refactor Pro! was made available to subscribers. This release is pretty significant to me because it contains a major feature that I have been waiting for for a long time: A Unit Test Runner. There were some teasers released by Mark Miller a while back, which only made me want to get my hands on the tool that much more.</description></item><item><title>Protect Yourself – Use TDD</title><link>http://drrandom.org/2007/07/18/protect-yourself-use-tdd/</link><pubDate>Wed, 18 Jul 2007 06:33:00 +0000</pubDate><guid>http://drrandom.org/2007/07/18/protect-yourself-use-tdd/</guid><description>So I had this analogy pop into my head a while back and I&amp;rsquo;ve been sitting on it because, quite frankly, I was almost embarrassed to have thought of it. I finally decided that I might as well post it since no one is going to read this anyway, so here goes:
Writing software without TDD is like having unprotected sex. Its extremely irresponsible in this day and age when everyone is supposed to know better, but it still happens a lot.</description></item><item><title>More On Testing and "Friend" Assemblies</title><link>http://drrandom.org/2007/06/18/more-on-testing-and-friend-assemblies/</link><pubDate>Mon, 18 Jun 2007 15:33:00 +0000</pubDate><guid>http://drrandom.org/2007/06/18/more-on-testing-and-friend-assemblies/</guid><description>So if you recall from some of my earlier posts, I&amp;rsquo;ve talked about the concept of the “Friend” class in C++ and how it could apply to TDD within .Net. Well, today, with the help of Roy Osherove, I just stumbled upon the InternalsVisibleToAttribute within .Net 2.0. This allows you to specify within one assembly, another assembly that should have access to the internal members of your assembly. This is genius, and goes a long way towards allowing you to keep your code encapsulated, while still being testable.</description></item><item><title>Struggles with the UpdaterApplicationBlock</title><link>http://drrandom.org/2007/06/11/struggles-with-the-updaterapplicationblock/</link><pubDate>Mon, 11 Jun 2007 18:53:07 +0000</pubDate><guid>http://drrandom.org/2007/06/11/struggles-with-the-updaterapplicationblock/</guid><description>The project I&amp;rsquo;m working on now has a huge need for auto-update. Strangely enough, there aren&amp;rsquo;t a whole lot of documented solutions for an auto-update application for .Net 1.1. In the 2.0 world you have ClickOnce, which handles those sorts of things for you (and in a way that isn&amp;rsquo;t terribly difficult to manage as a developer&amp;hellip;as long as you pay attention to what your doing), but the only real option you get from MS on this is the AutoUpdater Application Block from the Patterns and Practices guys.</description></item><item><title>More Thoughts on Language Support of TDD</title><link>http://drrandom.org/2007/06/04/more-thoughts-on-language-support-of-tdd/</link><pubDate>Mon, 04 Jun 2007 14:21:47 +0000</pubDate><guid>http://drrandom.org/2007/06/04/more-thoughts-on-language-support-of-tdd/</guid><description>Thinking about my earlier post discussing the OOP vs TOOP problem, I mentioned at the end that the best solution to this problem in my mind would be integrated language support for test classes. Specifically, a way to let the Compiler/Runtime know that a specific class is a test class, and should therefore be able to access any and every property of a class.
It occurred to me that such blatant intrusion into the privacy of a class is not unknown in the programming world.</description></item><item><title>Using Unit Testing To Document Requirements</title><link>http://drrandom.org/2007/06/01/using-unit-testing-to-document-requirements/</link><pubDate>Fri, 01 Jun 2007 15:17:02 +0000</pubDate><guid>http://drrandom.org/2007/06/01/using-unit-testing-to-document-requirements/</guid><description>Here is something I&amp;rsquo;ve been kicking around in my head for a while, and thought I would put it down in more or less a “permanent” format so maybe I&amp;rsquo;ll do something about it sometime&amp;hellip;
Back when I was first trying to get my head around TDD, one of the things that I found most clarifying was an idea I first saw in Test Driven Development in Microsoft .Net (Microsoft Press).</description></item><item><title>I love Mock Objects, but am I a “Mockist”?</title><link>http://drrandom.org/2007/05/29/i-love-mock-objects-but-am-i-a-mockist/</link><pubDate>Tue, 29 May 2007 15:45:00 +0000</pubDate><guid>http://drrandom.org/2007/05/29/i-love-mock-objects-but-am-i-a-mockist/</guid><description>I have officially crossed over&amp;hellip;.I am now using Mock Objects in my tests and loving it. After much humming and hawing, and trying to figure out how to write truly effective tests, I decided to give it a go, and so grabbed a copy of Rhino Mocks and started the grueling task of converting some data access code so that I no longer needed a database to run the tests. It took a little bit to get my mind around the new way of thinking, but I have to say it worked great.</description></item><item><title>Capturing Programmer Intent</title><link>http://drrandom.org/2007/01/02/capturing-programmer-intent/</link><pubDate>Tue, 02 Jan 2007 16:48:24 +0000</pubDate><guid>http://drrandom.org/2007/01/02/capturing-programmer-intent/</guid><description>I was listening to the ArCast recorded with Scott Hanselman earlier today, and he was talking about the idea that Non-Software artifacts should approach zero. If you&amp;rsquo;ve seen some of his posts, or listened to some Hanselminutes podcasts, you have no doubt come across this idea before. I like this particular phrasing mostly because it gets to the heart of what I think one of the most often overlooked aspect of the programming process is; Namely, the intent of the programmer.</description></item><item><title>Oh to live in a TDD world</title><link>http://drrandom.org/2006/12/27/oh-to-live-in-a-tdd-world/</link><pubDate>Wed, 27 Dec 2006 16:25:37 +0000</pubDate><guid>http://drrandom.org/2006/12/27/oh-to-live-in-a-tdd-world/</guid><description>Okay, I admit it, this is a rant&amp;hellip;.But I promised myself I would post more, so you have to take what you can&amp;hellip;
So here&amp;rsquo;s the deal, I&amp;rsquo;ve been peripherally involved in a project at my current client, to the point that I know generally where things are going, but I haven&amp;rsquo;t done any code review or anything like that. The good news is that the developer working on it is fairly sharp, so I had no major worries&amp;hellip;.</description></item></channel></rss>