<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tips on Dr Random</title><link>http://drrandom.org/tags/Tips/</link><description>Recent content in Tips on Dr Random</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 08 Jun 2015 17:16:22 +0000</lastBuildDate><atom:link href="http://drrandom.org/tags/Tips/index.xml" rel="self" type="application/rss+xml"/><item><title>fold – The greatest thing that ever happened to your data structure</title><link>http://drrandom.org/2015/06/08/purely-functional-data-structures-part-2/</link><pubDate>Mon, 08 Jun 2015 17:16:22 +0000</pubDate><guid>http://drrandom.org/2015/06/08/purely-functional-data-structures-part-2/</guid><description>Let&amp;rsquo;s say that you’ve been working hard on this really awesome data structure. Its fast, its space efficient, its immutable, its everything anyone could dream of in a data structure. But you only have time to implement one function for processing the data in your new miracle structure, so what would it be?
Ok, not a terribly realistic scenario, but bare with me here, there is a point to this. The answer to this question, of course, is that you would implement fold.</description></item><item><title>Sometimes doing the right thing is still not the right thing</title><link>http://drrandom.org/2012/03/20/sometimes-doing-the-right-thing-is-still-not-the-right-thing/</link><pubDate>Tue, 20 Mar 2012 10:14:00 +0000</pubDate><guid>http://drrandom.org/2012/03/20/sometimes-doing-the-right-thing-is-still-not-the-right-thing/</guid><description>Tentatively subtitled: “How scale can make fools of us all”
This is going to be a real life war story…cause I haven’t done one of those in a while, and this particular case really ticked me off. Here’s the scoop: I’ve got a “service” which is called by other parts of the system. And by “service” I don’t mean something running in its own process and waiting for SOAP/REST requests or messages, I simply mean something that has a defined entry point (a static method in this case), where you pass in some data, and get something back.</description></item><item><title>Grappling with multiple remotes in git-tfs</title><link>http://drrandom.org/2011/11/16/grappling-with-multiple-remotes-in-git-tfs/</link><pubDate>Wed, 16 Nov 2011 06:53:00 +0000</pubDate><guid>http://drrandom.org/2011/11/16/grappling-with-multiple-remotes-in-git-tfs/</guid><description>If you happen to be one of the many people in the unfortunate situation to be stuck working with TFS source control on a daily basis and gaze longingly at the folks using Git or Mercurial wishing you could have some of that distributed goodness for your very own self, I am here to tell you that all is not lost. There are a couple ways you can work with a distributed version control system along side TFS and try and reduce the pain associated with TFS.</description></item><item><title>Some code for sorting lists which may contain dependencies</title><link>http://drrandom.org/2009/09/18/some-code-for-sorting-lists-which-may-contain-dependencies/</link><pubDate>Fri, 18 Sep 2009 20:08:47 +0000</pubDate><guid>http://drrandom.org/2009/09/18/some-code-for-sorting-lists-which-may-contain-dependencies/</guid><description>I ran into this odd problem recently working with some Linq2SQL based persistence code. There is some code someone put together to commit a list of changed entities to the database as part of a single transaction, which simply iterates through the list and performs the appropriate action. The problem I was having was that I had an object referenced by another object that needed to be persisted first, otherwise there was a foreign key violation.</description></item></channel></rss>